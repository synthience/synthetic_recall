
---

## **Phase 5.9.1: UI Integration - CHEAT SHEET (v1.0)**

**üéØ Goal:** Connect the **Synthians Cognitive Dashboard frontend** to the stabilized backend APIs, replacing all static/placeholder data with live data, implementing loading/error states, and respecting the `ENABLE_EXPLAINABILITY` feature flag.

**Key Focus Area:** `Synthians_dashboard/client/` directory (React Frontend). Backend services are considered stable for this phase.

---

### **Core Tasks & Action Plan:**

1.  **Use API Hooks:** In page components (`pages/*.tsx`), import and use the appropriate `useQuery` hooks from `lib/api.ts` (e.g., `useMemoryCoreStats`, `useAssemblies`, `useMergeLog`, `useRuntimeConfig`, etc.).
2.  **Access Nested Data:** Remember that data fetched via the proxy is nested. Access actual payload via `hookResult.data?.data?.fieldName` (e.g., `statsQuery.data?.data?.core_stats?.total_memories`). Verify expected structure against `shared/schema.ts`.
3.  **Pass Data to UI Components:** Feed the fetched `data.data`, `isLoading`, and `isError` states as props to the relevant `components/dashboard/*.tsx` components (e.g., pass assembly list to `AssemblyTable`, stats to `OverviewCard`).
4.  **Implement Loading States:** In *every* component that displays fetched data, check the `isLoading` prop/state. Render `<Skeleton />` components matching the approximate final layout while loading.
5.  **Implement Error States:** In *every* component displaying fetched data, check the `isError` prop/state. If true, display a user-friendly error message (e.g., "Failed to load data", use `error.message`) instead of crashing. Use `<Alert variant="destructive">` where appropriate.
6.  **Conditional Rendering (Feature Flag):**
    *   Import `useFeatures` from `contexts/FeaturesContext.tsx`.
    *   Get `const { explainabilityEnabled } = useFeatures();`.
    *   Wrap *all* UI elements related to Phase 5.9 features (Merge Log view, Lineage view, Config viewer, Explain buttons/views) with ` {explainabilityEnabled && ...}`.
    *   Provide fallback UI or informative text (e.g., "Feature disabled") when `explainabilityEnabled` is false.
7.  **On-Demand Fetching (Explainability):** For explainability hooks (`useExplainActivation`, `useExplainMerge`, maybe `useAssemblyLineage`), ensure `enabled: false` is set in the `useQuery` options in `lib/api.ts` (if not already). Trigger `refetch()` manually in the UI component (e.g., `assembly-inspector.tsx`) when the user clicks a button.
8.  **Data Formatting:** Use utility functions (`lib/utils.ts -> formatTimeAgo`) or standard JS (`Date.toLocaleString()`, `Number.toLocaleString()`) to format dates, numbers, etc., for display within UI components. Handle `null`/`undefined` values gracefully (e.g., display 'N/A').

---

### **üîë Key Files & Modules Involved:**

*   **Data Fetching:** `client/src/lib/api.ts` (Verify hooks, maybe add `enabled: false` for explainability)
*   **Data Types:** `shared/schema.ts` (Reference/update if minor discrepancies found)
*   **Feature Flag:** `client/src/contexts/FeaturesContext.tsx` (`useFeatures` hook)
*   **Pages (Hook Usage & Prop Passing):** `client/src/pages/**/*.tsx` (e.g., `overview.tsx`, `memory-core.tsx`, `assemblies/index.tsx`, `assemblies/[id].tsx`, `config.tsx`, `logs.tsx` or wherever merge log is shown)
*   **Dashboard Components (Data Display):** `client/src/components/dashboard/**/*.tsx` (e.g., `OverviewCard.tsx`, `AssemblyTable.tsx`, `MergeLogView.tsx`, `LineageView.tsx`, `MergeExplanationView.tsx`, `ActivationExplanationView.tsx`)
*   **UI Primitives:** `client/src/components/ui/` (Used for rendering, especially `Skeleton`, `Alert`)
*   **Utilities:** `client/src/lib/utils.ts` (Formatting functions)

---

### **‚öôÔ∏è Key Concepts & Mechanisms:**

*   **TanStack Query:** Handles fetching, caching, `isLoading`, `isError`, `error`, `data` states. Trigger refetches via `refetch()` or `queryClient.invalidateQueries()`.
*   **Proxy Data Structure:** API responses are nested: `hookResult.data = { success: boolean, data: ActualPayload | null, error?: string }`. Access the real payload via `hookResult.data.data`.
*   **Feature Flag:** `useFeatures().explainabilityEnabled` controls visibility of new diagnostic/explainability UI.
*   **Loading States:** Use `<Skeleton>` for visual feedback during `isLoading`.
*   **Error States:** Display errors gracefully using `isError` and `error` without crashing.

---

### **‚ùó Common Pitfalls & Reminders:**

*   **Nesting:** Don't forget the extra `.data` access: `queryResult.data?.data?.fieldName`.
*   **Loading/Error:** Implement loading/error states for *every* data display component.
*   **Feature Flag:** Conditionally render *all* Phase 5.9 UI based on `explainabilityEnabled`. Check both rendering and disabling interactive elements (buttons).
*   **Schema Drift:** If data looks wrong, check the browser network tab vs. `shared/schema.ts`. Update the schema first if the backend is correct.
*   **Hook Dependencies:** Ensure `useQuery` keys are correct, especially for hooks with parameters (e.g., `useAssembly(id)`).
*   **NM Timeouts:** Monitor Neural Memory response times via the dashboard. If persistent timeouts occur, investigate NM service or potentially increase specific proxy timeouts (requires backend proxy change).

---

### **‚úÖ Verification Checklist:**

*   [ ] No static/placeholder data remains in the UI.
*   [ ] All relevant pages/components display live data from APIs.
*   [ ] Loading skeletons are shown correctly while data is fetching.
*   [ ] API errors are handled gracefully within components, displaying error messages.
*   [ ] Phase 5.9 features (Merge Log, Config Viewer, Lineage, Explanations) are hidden/disabled when `ENABLE_EXPLAINABILITY` is `false`.
*   [ ] Phase 5.9 features display correct data when `ENABLE_EXPLAINABILITY` is `true`.
*   [ ] Explainability views fetch data on demand (e.g., button click).
*   [ ] Dates, numbers, and large text blocks are formatted correctly.

---
